// <auto-generated />
using System;
using Diplom.Persistence.Contexts;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Diplom.Persistence.Migrations
{
    [DbContext(typeof(DiplomContext))]
    [Migration("20220221122434_AddPhoneWithCharacteristics")]
    partial class AddPhoneWithCharacteristics
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.2")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("Diplom.Domain.Entities.Category", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("Id")
                        .IsUnique();

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("Categories");
                });

            modelBuilder.Entity("Diplom.Domain.Entities.Order", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("SaleId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Orders");
                });

            modelBuilder.Entity("Diplom.Domain.Entities.Product", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CategoryId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("PurchasePrice")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.HasIndex("Id")
                        .IsUnique();

                    b.ToTable("Products");

                    b.HasDiscriminator<string>("Discriminator").HasValue("Product");
                });

            modelBuilder.Entity("Diplom.Domain.Entities.Sale", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("OrderId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ProductId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("OrderId");

                    b.HasIndex("ProductId");

                    b.ToTable("Sales");
                });

            modelBuilder.Entity("Diplom.Domain.Entities.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Age")
                        .HasColumnType("int");

                    b.Property<byte[]>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.Property<byte[]>("PasswordSalt")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("Id")
                        .IsUnique();

                    b.ToTable("Users");
                });

            modelBuilder.Entity("Diplom.Domain.Entities.Phone.Phone", b =>
                {
                    b.HasBaseType("Diplom.Domain.Entities.Product");

                    b.Property<string>("Color")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasDiscriminator().HasValue("Phone");
                });

            modelBuilder.Entity("Diplom.Domain.Entities.Order", b =>
                {
                    b.HasOne("Diplom.Domain.Entities.User", "User")
                        .WithMany("Orders")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Diplom.Domain.Entities.Product", b =>
                {
                    b.HasOne("Diplom.Domain.Entities.Category", "Category")
                        .WithMany("Products")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");
                });

            modelBuilder.Entity("Diplom.Domain.Entities.Sale", b =>
                {
                    b.HasOne("Diplom.Domain.Entities.Order", "Order")
                        .WithMany("Sales")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Diplom.Domain.Entities.Product", "Product")
                        .WithMany("Sales")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Order");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("Diplom.Domain.Entities.Phone.Phone", b =>
                {
                    b.OwnsOne("Diplom.Domain.Entities.Phone.Characteristics.Appearance", "Appearance", b1 =>
                        {
                            b1.Property<Guid>("PhoneId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<string>("BackPanelColour")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("ColorDeclaredByTheManufacturer")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("ColorOfFaces")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("FrontPanelColour")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("PhoneId");

                            b1.ToTable("Products");

                            b1.WithOwner()
                                .HasForeignKey("PhoneId");
                        });

                    b.OwnsOne("Diplom.Domain.Entities.Phone.Characteristics.DeviceSystem", "System", b1 =>
                        {
                            b1.Property<Guid>("PhoneId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<int>("BuiltInMemory")
                                .HasColumnType("int");

                            b1.Property<string>("OSVersion")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("OperatingSystem")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)");

                            b1.Property<int>("RamCapacity")
                                .HasColumnType("int");

                            b1.HasKey("PhoneId");

                            b1.ToTable("Products");

                            b1.WithOwner()
                                .HasForeignKey("PhoneId");
                        });

                    b.OwnsOne("Diplom.Domain.Entities.Phone.Characteristics.Display", "Display", b1 =>
                        {
                            b1.Property<Guid>("PhoneId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<int>("ScreenRefreshRateHz")
                                .HasColumnType("int");

                            b1.Property<string>("ScreenResolution")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)");

                            b1.Property<double>("ScreenSizeInch")
                                .HasColumnType("float");

                            b1.HasKey("PhoneId");

                            b1.ToTable("Products");

                            b1.WithOwner()
                                .HasForeignKey("PhoneId");
                        });

                    b.OwnsOne("Diplom.Domain.Entities.Phone.Characteristics.FactoryData", "FactoryData", b1 =>
                        {
                            b1.Property<Guid>("PhoneId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<string>("CountryOfOrigin")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)");

                            b1.Property<int>("WarrantyMonth")
                                .HasColumnType("int");

                            b1.HasKey("PhoneId");

                            b1.ToTable("Products");

                            b1.WithOwner()
                                .HasForeignKey("PhoneId");
                        });

                    b.OwnsOne("Diplom.Domain.Entities.Phone.Characteristics.GeneralParameters", "GeneralParameters", b1 =>
                        {
                            b1.Property<Guid>("PhoneId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<string>("ManufacturerCode")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Model")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Type")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)");

                            b1.Property<int>("YearOfRelease")
                                .HasColumnType("int");

                            b1.HasKey("PhoneId");

                            b1.ToTable("Products");

                            b1.WithOwner()
                                .HasForeignKey("PhoneId");
                        });

                    b.OwnsOne("Diplom.Domain.Entities.Phone.Characteristics.MobileCommunications", "MobileCommunications", b1 =>
                        {
                            b1.Property<Guid>("PhoneId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<bool>("SupportFor2GNetworks")
                                .HasColumnType("bit");

                            b1.Property<bool>("SupportFor3GNetworks")
                                .HasColumnType("bit");

                            b1.Property<bool>("SupportFor4GNetworksLTE")
                                .HasColumnType("bit");

                            b1.Property<bool>("SupportFor5GNetworks")
                                .HasColumnType("bit");

                            b1.HasKey("PhoneId");

                            b1.ToTable("Products");

                            b1.WithOwner()
                                .HasForeignKey("PhoneId");
                        });

                    b.Navigation("Appearance")
                        .IsRequired();

                    b.Navigation("Display")
                        .IsRequired();

                    b.Navigation("FactoryData")
                        .IsRequired();

                    b.Navigation("GeneralParameters")
                        .IsRequired();

                    b.Navigation("MobileCommunications")
                        .IsRequired();

                    b.Navigation("System")
                        .IsRequired();
                });

            modelBuilder.Entity("Diplom.Domain.Entities.Category", b =>
                {
                    b.Navigation("Products");
                });

            modelBuilder.Entity("Diplom.Domain.Entities.Order", b =>
                {
                    b.Navigation("Sales");
                });

            modelBuilder.Entity("Diplom.Domain.Entities.Product", b =>
                {
                    b.Navigation("Sales");
                });

            modelBuilder.Entity("Diplom.Domain.Entities.User", b =>
                {
                    b.Navigation("Orders");
                });
#pragma warning restore 612, 618
        }
    }
}
